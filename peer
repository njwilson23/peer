#!/usr/bin/env python
# Search for and open a PDF with the given name. Searches within a specified
# list of directories, hardcoded as *search_dirs*. For now, only check whether
# the path contains the directory name, which happens to be good enough.

import sys
import os
import json
import argparse
import itertools
import fnmatch
import operator
import subprocess

def findconfig():
    """ Search the current directory, then the home directory for a
    configuration file. """
    home = os.path.expanduser("~")
    cwd = os.getcwd()
    if os.path.isfile(os.path.join(cwd, ".peerrc.json")):
        path = os.path.join(cwd, ".peerrc.json")
    elif os.path.isfile(os.path.join(home, ".peerrc.json")):
        path = os.path.join(home, ".peerrc.json")
    else:
        path = None
    return path


def loadconfig(path):
    if path is None:
        cfg = dict(reader="evince", search_roots=["~/Downloads", "~/Documents"])

    else:
        with open(path, "r") as f:
            cfg = json.load(f)
    return cfg


parser = argparse.ArgumentParser(description= """\
Search for and optionally open a PDF matching the given keywords. Searches
within a specified list of directories, hardcoded as *search_dirs*.

It is possible to use a ".peerrc.json" config file to specify the directories to
search. The config file will be searched for first in the working directory, and
next in the home directory ($HOME).""")

parser.add_argument("-l", "--list", action="store_true", help="list matches and exit")
parser.add_argument("-o", "--open", action="store_true", help="open best match with the configured reader")
parser.add_argument("-p", "--path", action="store_true", help="include file paths")
parser.add_argument("-c", "--case-sensitive", action="store_true", help="match case sensitive names")
parser.add_argument("-f", "--filter-dir", help="name of a directory to filter on")
parser.add_argument("keywords", nargs="+", metavar="keyword", help="search terms")

args = parser.parse_args()

if args.list:
    import warnings
    warnings.warn("the --list (-l) option is now default and will be removed")

config = loadconfig(findconfig())
search_roots = [os.path.expanduser(d) for d in config["search_roots"]]


# Construct the search term
def eithercase(s):
    return reduce(operator.add, ("["+c.upper()+c.lower()+"]" for c in s))

if args.case_sensitive:
    sterm = '*' + reduce(lambda a,b: a+'*'+b, args.keywords) + '*'
else:
    sterm = '*' + reduce(lambda a,b: a+'*'+b, map(eithercase, args.keywords)) + '*'


# Search the directory subtree for matches
def find_pdfs(kw, search_roots):
    """ Walk an iterable of root directories searching for *.pdf files
    satisfying *keyword*. """
    def matcher(cmpstr):
        return fnmatch.fnmatch(cmpstr, kw)
    
    search_dirs = itertools.chain((os.getcwd(),),
            *((directory for directory,_,_ in os.walk(root)) for root in search_roots))
    
    results = []
    
    for directory in search_dirs:
        if len(results) > 20:
            break
        pdfs = filter(lambda s: s.lower().endswith(".pdf"), os.listdir(directory))
        matches = map(matcher, pdfs)
        chunk_results = [os.path.join(directory, pdf)
                            for ismatch, pdf in zip(matches, pdfs) if ismatch]
        results.extend(chunk_results)
    return results

results = find_pdfs(sterm, search_roots)


# Filter by a directory arg
if args.filter_dir:
    results = filter(lambda s: args.filter_dir in s.split('/'), results)


# Strip paths
if not args.path:
    ppresults = map(lambda s: os.path.split(s)[1], results)
else:
    ppresults = results


# Print them to screen and exit
if len(ppresults) > 0:
    for i, ppresult in enumerate(ppresults):
        print i+1,'\t', ppresult
        if i > 10:
            break
else:
    print "no matches found"

if args.open and (len(results) > 0):
    proc = subprocess.Popen((config["reader"], results[0]), stdin=None, stdout=None,
                            stderr=None, close_fds=True, shell=False)

