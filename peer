#!/usr/bin/env python
# Search for and open a PDF with the given name. Searches within a specified
# list of directories, hardcoded as *search_dirs*. For now, only check whether
# the path contains the directory name, which happens to be good enough.

import sys
import os
import json
import argparse
import itertools
import fnmatch
import operator
import subprocess
import StringIO

def findconfig():
    """ Search the current directory, then the home directory for a
    configuration file. """
    home = os.path.expanduser("~")
    cwd = os.getcwd()
    if os.path.isfile(os.path.join(cwd, ".peerrc.json")):
        path = os.path.join(cwd, ".peerrc.json")
    elif os.path.isfile(os.path.join(home, ".peerrc.json")):
        path = os.path.join(home, ".peerrc.json")
    else:
        path = None
    return path


def loadconfig(path=None):
    """ If given a path, load a JSON configuration file. Otherwise, supply a
    minimal default configuration. """
    if path is None:
        cfg = dict(reader="evince", search_roots=["~/Downloads", "~/Documents"])

    else:
        with open(path, "r") as f:
            cfg = json.load(f)
    cfg["search_roots"] = [os.path.expanduser(d) for d in cfg["search_roots"]]
    return cfg


def build_search_term(kw, case_sensitive=True):
    """ Build a search term that can be used by fnmatch from a list of key
    words. """
    def eithercase(s):
        return reduce(operator.add, ("["+c.upper()+c.lower()+"]" for c in s))
    
    if args.case_sensitive:
        sterm = '*' + reduce(lambda a,b: a+'*'+b, args.keywords) + '*'
    else:
        sterm = '*' + reduce(lambda a,b: a+'*'+b, map(eithercase, args.keywords)) + '*'
    return sterm


def find_pdfs(phrase, search_roots):
    """ Walk an iterable of root directories searching for *.pdf files
    satisfying *phrase*. """
    def matcher(cmpstr):
        return fnmatch.fnmatch(cmpstr, phrase)
    
    search_dirs = itertools.chain((os.getcwd(),),
            *((directory for directory,_,_ in os.walk(root)) for root in search_roots))
    
    results = []
    
    for directory in search_dirs:
        if len(results) > 20:
            break
        pdfs = filter(lambda s: s.lower().endswith(".pdf"), os.listdir(directory))
        matches = map(matcher, pdfs)
        chunk_results = [os.path.join(directory, pdf)
                            for ismatch, pdf in zip(matches, pdfs) if ismatch]
        results.extend(chunk_results)
    return results

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description= """\
Search for and optionally open a PDF matching the given keywords.

It is possible to use a ".peerrc.json" config file to specify the directories to
search and the program to use to upen PDFs. The config file will be looked for
first in the working directory, and next in the home directory.""")
    
    parser.add_argument("-l", "--list", action="store_true",
                        help="list matches and exit")
    parser.add_argument("-o", "--open", action="store_true",
                        help="open best match with the configured reader")
    parser.add_argument("-p", "--path", action="store_true",
                        help="include file paths")
    parser.add_argument("-c", "--case-sensitive", action="store_true",
                        help="match case sensitive names")
    parser.add_argument("-f", "--filter-dir",
                        help="name of a directory to filter on")
    parser.add_argument("keywords", nargs="+", metavar="keyword",
                        help="search terms")
    
    args = parser.parse_args()
    
    if args.list:
        import warnings
        warnings.warn("the --list (-l) option is now default and will be removed")
    
    config = loadconfig(findconfig())
    search_roots = config["search_roots"]
    
    # Construct the search term
    sterm = build_search_term(args.keywords, case_sensitive=args.case_sensitive)
    
    # Search the directory subtree for matches
    results = find_pdfs(sterm, search_roots)
    
    # Filter by a directory arg
    if args.filter_dir:
        results = filter(lambda s: args.filter_dir in s.split('/'), results)
    
    # Strip paths
    if not args.path:
        ppresults = map(lambda s: os.path.split(s)[1], results)
    else:
        ppresults = results
    
    # Print them to screen and exit
    if len(ppresults) > 0:
        for i, ppresult in enumerate(ppresults):
            print i+1,'\t', ppresult
            if i > 10:
                break
    else:
        print "no matches found"
    
    if args.open and (len(results) > 0):
        with open(os.path.expanduser("~/.peer.log"), "w") as ferr:
            proc = subprocess.Popen((config["reader"], results[0]), stdin=None, stdout=None,
                                stderr=ferr, close_fds=True, shell=False)

