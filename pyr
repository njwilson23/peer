#!/usr/bin/env python
# Search for and open a PDF with the given name. Searches within a specified
# list of directories, hardcoded as *search_dirs*. For now, only check whether
# the path contains the directory name, which happens to be good enough.

import sys
import os
import argparse
import itertools
import fnmatch
import operator
import subprocess
import traceback


parser = argparse.ArgumentParser(description= """\
Search for and optionally open a PDF matching the given keywords. Searches
within a specified list of directories, hardcoded as *search_dirs*.""")

parser.add_argument("-l", "--list", action="store_true", help="list matches and exit")
parser.add_argument("-p", "--path", action="store_true", help="include file paths")
parser.add_argument("-f", "--filter-dir", help="name of a directory to filter by")
parser.add_argument("keywords", nargs="+", metavar="keyword", help="search terms")

args = parser.parse_args()

search_roots = map(os.path.expanduser, ('~/Documents/pdfs', '~/Downloads'))

def eithercase(s):
    return reduce(operator.add, ("["+c.upper()+c.lower()+"]" for c in s))

sterm = '*' + reduce(lambda a,b: a+'*'+b, map(eithercase, args.keywords)) + '*'

# Search the directory subtree for matches
def matcher(cmpstr):
    return fnmatch.fnmatch(cmpstr, sterm)

search_dirs = itertools.chain((os.getcwd(),),
        *((directory for directory,_,_ in os.walk(root)) for root in search_roots))

results = []

for directory in search_dirs:
    if len(results) > 20:
        break
    pdfs = filter(lambda s: s.lower().endswith(".pdf"), os.listdir(directory))
    matches = map(matcher, pdfs)
    chunk_results = [os.path.join(directory, pdf)
                        for ismatch, pdf in zip(matches, pdfs) if ismatch]
    results.extend(chunk_results)

# Filter by a directory arg
if args.filter_dir:
    results = filter(lambda s: args.filter_dir in s.split('/'), results)

# Strip paths
if not args.path:
    ppresults = map(lambda s: os.path.split(s)[1], results)
else:
    ppresults = results

# Print them to screen and exit
if len(ppresults) > 0:
    for i, ppresult in enumerate(ppresults):
        print i+1,'\t', ppresult
        if i > 10:
            break
else:
    print "no matches found"

if (not args.list) and (len(results) > 0):
    proc = subprocess.Popen(('evince', results[0]), stdin=None, stdout=None,
                            stderr=None, close_fds=True, shell=False)

