#!/usr/bin/env python
# Search for and open a PDF with the given name. Searches within a specified
# list of directories, hardcoded as *search_dirs*. For now, only check whether
# the path contains the directory name, which happens to be good enough.

import sys
import os
import argparse
import subprocess
import traceback


parser = argparse.ArgumentParser(description= """\
Search for and open a PDF with the given name. Searches within a specified
list of directories, hardcoded as *search_dirs*. For now, only check whether
the path contains the directory name, which happens to be good enough.""")

parser.add_argument("-l", action="store_true", help="List matches and exit")
parser.add_argument("-p", action="store_true", help="Include file paths")
parser.add_argument("-f", help="Name of a directory to filter by")
parser.add_argument("keywords", nargs="+", metavar="keyword", help="Search terms")

args = parser.parse_args()

search_dirs = (os.getcwd(), 'Documents', 'Downloads')
eitherin = lambda L, s: True in ((a in s) for a in L)

sterm = '*' + reduce(lambda a,b: a+'*'+b, args.keywords) + '*'

# Use locate to search for PDFs
try:
    results = subprocess.check_output(('locate', '-e', '-b', '-i', sterm))
    results = results.split('\n')
    results = filter(lambda s: s[-4:].lower()=='.pdf', results)
    results = filter(lambda s: eitherin(search_dirs, s), results)
except subprocess.CalledProcessError:
    results = []

# Filter by a directory arg
if args.f:
    results = filter(lambda s: args.f in s.split('/'), results)

# Strip paths
if args.p:
    ppresults = map(lambda s: os.path.split(s)[1], results)
else:
    ppresults = results

# Print them to screen and exit
if len(ppresults) > 0:
    for i, ppresult in enumerate(ppresults):
        print i+1,'\t', ppresult
        if i > 10:
            break
else:
    print "no matches found"

if (not args.l) and (len(results) > 0):
    proc = subprocess.Popen(('evince', results[0]), stdin=None, stdout=None,
                            stderr=None, close_fds=True, shell=False)

